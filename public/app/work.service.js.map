{"version":3,"sources":["work.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA8C,eAAe,CAAC,CAAA;AAC9D,qBAA2B,eAAe,CAAC,CAAA;AAE3C,QAAO,6BAA6B,CAAC,CAAA;AAKrC;IASC,qBAAoB,IAAW;QAAX,SAAI,GAAJ,IAAI,CAAO;QARvB,eAAU,GAAG,MAAM,CAAC,CAAE,iBAAiB;QACvC,gBAAW,GAAG,YAAY,CAAC,CAAE,iBAAiB;QAC9C,kBAAa,GAAG,kBAAkB,CAAC,CAAE,iBAAiB;QACtD,YAAO,GAAG,IAAI,cAAO,CAAC;YAC7B,cAAc,EAAE,kBAAkB;YAClC,cAAc,EAAG,QAAQ;SACzB,CAAC,CAAC;IAGH,CAAC;IAED,6BAAO,GAAP,UAAQ,IAAW;QAClB,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,cAAc,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAC,CAAC,CAAC;QAClG,MAAM,CAAC,IAAI,CAAC,IAAI;aACd,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAC,OAAO,EAAG,OAAO,EAAC,CAAC;aAChE,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,EAAf,CAAe,CAAC;aAC5B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC;IAED,6BAAO,GAAP;QACC,MAAM,CAAC,IAAI,CAAC,IAAI;aACd,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,CAAC,IAAc,EAAzB,CAAyB,CAAC;aACtC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC;IAED,mCAAa,GAAb;QACC,MAAM,CAAC,IAAI,CAAC,IAAI;aACd,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC;aACvB,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,EAAf,CAAe,CAAC;aAC5B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC;IAED,8BAAQ,GAAR;QACC,IAAI,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,6BAA6B,CAAC,CAAC,SAAS,CAAC,CAAC;QAC7E,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAEO,iCAAW,GAAnB,UAAoB,KAAU;QAC5B,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC,CAAC,yBAAyB;QACpE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAChD,CAAC;IA9CF;QAAC,iBAAU,EAAE;;mBAAA;IA+Cb,kBAAC;AAAD,CA9CA,AA8CC,IAAA;AA9CY,mBAAW,cA8CvB,CAAA","file":"work.service.js","sourcesContent":["import { Headers, RequestOptions, Http } from '@angular/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\nimport { Work } from './work';\r\n\r\n@Injectable()\r\nexport class WorkService{\r\n\tprivate addWorkUrl = 'work';  // URL to web api\r\n\tprivate workListUrl = 'work/lists';  // URL to web api\r\n\tprivate recentWorkUrl = 'work/recentlists';  // URL to web api\r\n\tprivate headers = new Headers({\r\n\t\t'Content-Type': 'application/json',\r\n\t\t'X-CSRF-TOKEN' : \"safafa\",\r\n\t});\r\n\r\n\tconstructor(private http : Http){\r\n\t}\r\n\r\n\taddWork(work : Work) : Promise<Work>{\r\n\t\tlet headers = new Headers({ 'Content-Type': 'application/json', 'X-CSRF-TOKEN': this.getToken()});\r\n\t\treturn this.http\r\n\t\t\t.post(this.addWorkUrl, JSON.stringify(work), {headers : headers})\r\n\t\t\t.toPromise()\r\n\t\t\t.then(res => res.json().data)\r\n\t\t\t.catch(this.handleError);\r\n\t}\r\n\r\n\tgetWork() : Promise<Work[]>{\r\n\t\treturn this.http\r\n\t\t\t.get(this.workListUrl)\r\n\t\t\t.toPromise()\r\n\t\t\t.then(res => res.json().data as Work[])\r\n\t\t\t.catch(this.handleError);\r\n\t}\r\n\r\n\tgetRecentWork() : Promise<Work[]>{\r\n\t\treturn this.http\r\n\t\t\t.get(this.recentWorkUrl)\r\n\t\t\t.toPromise()\r\n\t\t\t.then(res => res.json().data)\r\n\t\t\t.catch(this.handleError);\r\n\t}\r\n\r\n\tgetToken() {\r\n\t\tlet token = document.querySelector('meta[property=\"csrf-token\"]')['content'];\r\n\t\treturn token;\r\n\t}\r\n\r\n\tprivate handleError(error: any): Promise<any> {\r\n\t  console.error('An error occurred', error); // for demo purposes only\r\n\t  return Promise.reject(error.message || error);\r\n\t}\r\n}"],"sourceRoot":"/source/"}