{"version":3,"sources":["work.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA8C,eAAe,CAAC,CAAA;AAC9D,qBAA2B,eAAe,CAAC,CAAA;AAE3C,QAAO,6BAA6B,CAAC,CAAA;AAMrC;IAOC,qBAAoB,IAAW;QAAX,SAAI,GAAJ,IAAI,CAAO;QANvB,eAAU,GAAG,MAAM,CAAC,CAAE,iBAAiB;QACvC,gBAAW,GAAG,YAAY,CAAC,CAAE,iBAAiB;QAC9C,kBAAa,GAAG,kBAAkB,CAAC,CAAE,iBAAiB;QACtD,oBAAe,GAAG,mBAAmB,CAAC,CAAE,iBAAiB;QACzD,YAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,cAAc,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAC,CAAC,CAAC;IAGtG,CAAC;IAED,6BAAO,GAAP,UAAQ,IAAW;QAClB,MAAM,CAAC,IAAI,CAAC,IAAI;aACd,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAC,OAAO,EAAG,IAAI,CAAC,OAAO,EAAC,CAAC;aACrE,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,EAAf,CAAe,CAAC;aAC5B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC;IAED,6BAAO,GAAP;QACC,MAAM,CAAC,IAAI,CAAC,IAAI;aACd,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,CAAC,IAAc,EAAzB,CAAyB,CAAC;aACtC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC;IAED,mCAAa,GAAb;QACC,MAAM,CAAC,IAAI,CAAC,IAAI;aACd,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC;aACvB,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,CAAC,IAAc,EAAzB,CAAyB,CAAC;aACtC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC;IAED,kCAAY,GAAZ,UAAa,IAAa;QACzB,MAAM,CAAC,IAAI,CAAC,IAAI;aACd,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAC,OAAO,EAAG,IAAI,CAAC,OAAO,EAAC,CAAC;aAC1E,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAY,EAApB,CAAoB,CAAC;aACjC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC;IAED,8BAAQ,GAAR;QACC,IAAI,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,6BAA6B,CAAC,CAAC,SAAS,CAAC,CAAC;QAC7E,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAEO,iCAAW,GAAnB,UAAoB,KAAU;QAC5B,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC,CAAC,yBAAyB;QACpE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAChD,CAAC;IAnDF;QAAC,iBAAU,EAAE;;mBAAA;IAoDb,kBAAC;AAAD,CAnDA,AAmDC,IAAA;AAnDY,mBAAW,cAmDvB,CAAA","file":"work.service.js","sourcesContent":["import { Headers, RequestOptions, Http } from '@angular/http';\nimport { Injectable } from '@angular/core';\n\nimport 'rxjs/add/operator/toPromise';\n\nimport { Work } from './work';\nimport { Result } from './result';\n\n@Injectable()\nexport class WorkService{\n\tprivate addWorkUrl = 'work';  // URL to web api\n\tprivate workListUrl = 'work/lists';  // URL to web api\n\tprivate recentWorkUrl = 'work/recentlists';  // URL to web api\n\tprivate sendWeekWorkUrl = 'work/sendweekwork';  // URL to web api\n\tprivate headers = new Headers({ 'Content-Type': 'application/json', 'X-CSRF-TOKEN': this.getToken()});\n\n\tconstructor(private http : Http){\n\t}\n\n\taddWork(work : Work) : Promise<Work>{\n\t\treturn this.http\n\t\t\t.post(this.addWorkUrl, JSON.stringify(work), {headers : this.headers})\n\t\t\t.toPromise()\n\t\t\t.then(res => res.json().data)\n\t\t\t.catch(this.handleError);\n\t}\n\n\tgetWork() : Promise<Work[]>{\n\t\treturn this.http\n\t\t\t.get(this.workListUrl)\n\t\t\t.toPromise()\n\t\t\t.then(res => res.json().data as Work[])\n\t\t\t.catch(this.handleError);\n\t}\n\n\tgetRecentWork() : Promise<Work[]>{\n\t\treturn this.http\n\t\t\t.get(this.recentWorkUrl)\n\t\t\t.toPromise()\n\t\t\t.then(res => res.json().data as Work[])\n\t\t\t.catch(this.handleError);\n\t}\n\n\tsendWeekWork(info : Object) : Promise<Result>{\n\t\treturn this.http\n\t\t\t.post(this.sendWeekWorkUrl, JSON.stringify(info), {headers : this.headers})\n\t\t\t.toPromise()\n\t\t\t.then(res => res.json() as Result)\n\t\t\t.catch(this.handleError);\n\t}\n\n\tgetToken() {\n\t\tlet token = document.querySelector('meta[property=\"csrf-token\"]')['content'];\n\t\treturn token;\n\t}\n\n\tprivate handleError(error: any): Promise<any> {\n\t  console.error('An error occurred', error); // for demo purposes only\n\t  return Promise.reject(error.message || error);\n\t}\n}"]}